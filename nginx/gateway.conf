# Nginx API Gateway Configuration
# Load balancing and routing for microservices

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/x-javascript application/xml+rss 
               application/javascript application/json;

    # Upstream services
    upstream api_gateway {
        least_conn;
        server api-gateway:4000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream pricing_service {
        least_conn;
        server pricing-service:4001 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream renderer_service {
        least_conn;
        server renderer-service:4002 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream analytics_service {
        least_conn;
        server analytics-service:4003 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;

    server {
        listen 80;
        server_name _;

        # Frontend static files
        root /usr/share/nginx/html;
        index index.html;

        # API Gateway routes
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        # Pricing service (direct routing for performance)
        location /api/pricing/ {
            limit_req zone=api_limit burst=50 nodelay;
            
            proxy_pass http://pricing_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_read_timeout 60s;
        }

        # Renderer service
        location /api/render/ {
            limit_req zone=api_limit burst=10 nodelay;
            client_max_body_size 20M;
            
            proxy_pass http://renderer_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_read_timeout 300s;
        }

        # Analytics service
        location /api/analytics/ {
            limit_req zone=api_limit burst=30 nodelay;
            
            proxy_pass http://analytics_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Socket.io (WebSocket support)
        location /socket.io/ {
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        # Frontend SPA fallback
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

