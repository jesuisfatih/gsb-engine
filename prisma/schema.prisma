// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Role a user holds within a tenant workspace.
enum TenantRole {
  SUPER_ADMIN
  MERCHANT_ADMIN
  MERCHANT_STAFF
}

enum UserStatus {
  INVITED
  ACTIVE
  SUSPENDED
}

enum TenantStatus {
  ACTIVE
  PAST_DUE
  SUSPENDED
  CANCELLED
}

enum DesignStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  ARCHIVED
}

enum JobStatus {
  QUEUED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskState {
  PENDING
  RUNNING
  SUCCESS
  ERROR
}

enum BillingChargeStatus {
  PENDING
  INVOICED
  PAID
  WAIVED
  REFUNDED
}

model Plan {
  id           String   @id @default(cuid())
  name         String
  description  String?
  priceMonthly Decimal? @db.Decimal(10, 2)
  limits       Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenants      Tenant[]
}

model Tenant {
  id               String                @id @default(uuid())
  slug             String                @unique
  displayName      String
  status           TenantStatus          @default(ACTIVE)
  planId           String?
  plan             Plan?                 @relation(fields: [planId], references: [id])
  branding         Json?
  settings         Json?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  users            TenantUser[]
  apiTokens        ApiToken[]
  products         Product[]
  printTechniques  PrintTechnique[]
  supplierProfiles SupplierProfile[]
  templates        Template[]
  assets           AssetLibraryItem[]
  builderConfigs   ProductBuilderConfig[]
  builderSettings  BuilderSettings?
  gallerySettings  GallerySettings?
  designs          DesignDocument[]
  gangSheets       GangSheet[]
  shortcodes       Shortcode[]
  jobs             Job[]
  orders           Order[]
  pricingRules     PricingRule[]
  discounts        Discount[]
  taxProfiles      TaxProfile[]
  auditLogs        AuditLog[]
  webhookEvents    WebhookEvent[]
  backgroundTasks  BackgroundTask[]
  outputs          DesignOutput[]
  notifications    Notification[]
  routingRules     SupplierRoutingRule[]
  shortcodeUsages  ShortcodeUsage[]
  billingConfig    BillingConfig?
  billingCharges   BillingCharge[]
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  hashedPassword String?
  displayName    String
  status         UserStatus       @default(ACTIVE)
  lastLoginAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  memberships    TenantUser[]
  auditLogs      AuditLog[]       @relation("AuditActor")
  designs        DesignDocument[]
  assignedJobs   Job[]
  notifications  Notification[]
}

model TenantUser {
  id        String     @id @default(uuid())
  tenantId  String
  userId    String
  role      TenantRole
  invitedBy String?
  createdAt DateTime   @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([tenantId, userId])
}

model ApiToken {
  id         String    @id @default(cuid())
  tenantId   String
  name       String
  key        String    @unique
  secretHash String
  scopes     String[]
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model Product {
  id               String    @id @default(uuid())
  tenantId         String?
  slug             String
  title            String
  category         String?
  description      String?
  shopifyProductId String?
  defaultSurfaceId String?
  attributes       Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  tenant         Tenant?          @relation(fields: [tenantId], references: [id])
  surfaces       Surface[]
  variants       Variant[]
  defaultSurface Surface?         @relation("ProductDefaultSurface", fields: [defaultSurfaceId], references: [id])
  designs        DesignDocument[]
  templates      Template[]
  shortcodes     Shortcode[]
  builderConfigs ProductBuilderConfig[]

  @@unique([tenantId, slug])
}

model Surface {
  id          String    @id @default(uuid())
  productId   String
  name        String
  description String?
  widthMm     Float
  heightMm    Float
  safeArea    Json?
  bleedArea   Json?
  maskSvg     String?
  ppi         Int?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  product   Product          @relation(fields: [productId], references: [id])
  products  Product[]        @relation("ProductDefaultSurface")
  designs   DesignDocument[]
  templates Template[]

  @@index([productId])
}

model Variant {
  id               String   @id @default(uuid())
  productId        String
  shopifyVariantId String?
  sku              String?
  title            String?
  price            Decimal? @db.Decimal(10, 2)
  options          Json?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ProductBuilderConfig {
  id                   String   @id @default(uuid())
  tenantId             String
  productId            String
  sizeOption           String?  @default("Size")
  sizeUnit             String?  @default("in")
  productType          String?  @default("Gang Sheet")
  printFileNameTokens  Json?
  useCustomButtonLabel Boolean  @default(false)
  customButtonLabel    String?
  settings             Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  sizes   ProductSizePreset[]

  @@unique([tenantId, productId])
}

model ProductSizePreset {
  id        String   @id @default(uuid())
  configId  String
  label     String
  widthIn   Decimal? @db.Decimal(10, 2)
  heightIn  Decimal? @db.Decimal(10, 2)
  price     Decimal? @db.Decimal(10, 2)
  maxFiles  Int?
  sortOrder Int      @default(0)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  config ProductBuilderConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@index([configId, sortOrder])
}

model PrintTechnique {
  id          String   @id @default(uuid())
  tenantId    String?
  name        String
  slug        String
  description String?
  rules       Json?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant?          @relation(fields: [tenantId], references: [id])
  designs   DesignDocument[]
  jobs      Job[]
  templates Template[]

  @@unique([tenantId, slug])
}

model SupplierProfile {
  id           String   @id @default(uuid())
  tenantId     String?
  name         String
  slug         String
  contactEmail String?
  regions      Json?
  techniques   String[]
  leadTimeDays Int?
  pricingNotes String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant?               @relation(fields: [tenantId], references: [id])
  jobs         Job[]
  gangSheets   GangSheet[]
  routingRules SupplierRoutingRule[]

  @@unique([tenantId, slug])
}

model Template {
  id                 String        @id @default(uuid())
  tenantId           String?
  name               String
  description        String?
  targetProductId    String?
  targetSurfaceId    String?
  defaultPrintTechId String?
  payload            Json
  isPublic           Boolean       @default(false)
  tags               TemplateTag[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?

  tenant                Tenant?         @relation(fields: [tenantId], references: [id])
  targetProduct         Product?        @relation(fields: [targetProductId], references: [id])
  targetSurface         Surface?        @relation(fields: [targetSurfaceId], references: [id])
  defaultPrintTechnique PrintTechnique? @relation(fields: [defaultPrintTechId], references: [id])

  @@index([tenantId])
}

model TemplateTag {
  id         String @id @default(cuid())
  templateId String
  tag        String

  template Template @relation(fields: [templateId], references: [id])

  @@unique([templateId, tag])
}

model AssetLibraryItem {
  id        String    @id @default(uuid())
  tenantId  String
  type      String
  label     String?
  url       String
  metadata  Json?
  source    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, type])
}

model BuilderSettings {
  id        String   @id @default(uuid())
  tenantId  String   @unique
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model GallerySettings {
  id             String   @id @default(uuid())
  tenantId       String   @unique
  builderOptions Json?
  watermark      Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model DesignDocument {
  id                    String       @id @default(uuid())
  tenantId              String
  userId                String?
  productId             String?
  surfaceId             String?
  printTechniqueId      String?
  status                DesignStatus @default(DRAFT)
  name                  String?
  description           String?
  snapshot              Json
  autosaveSnapshot      Json?
  autosaveAt            DateTime?
  previewUrl            String?
  submittedAt           DateTime?
  sourceShortcodeHandle String?
  sheetWidthMm          Float?
  sheetHeightMm         Float?
  metrics               Json?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  user           User?           @relation(fields: [userId], references: [id])
  product        Product?        @relation(fields: [productId], references: [id])
  surface        Surface?        @relation(fields: [surfaceId], references: [id])
  printTechnique PrintTechnique? @relation(fields: [printTechniqueId], references: [id])
  versions       DesignVersion[]
  gangSheetItems GangSheetItem[]
  jobs           Job[]
  orders         Order[]
  outputs        DesignOutput[]

  @@index([tenantId, status])
}

model DesignVersion {
  id        String   @id @default(cuid())
  designId  String
  version   Int
  payload   Json
  createdAt DateTime @default(now())

  design DesignDocument @relation(fields: [designId], references: [id])

  @@unique([designId, version])
}

model GangSheet {
  id               String    @id @default(uuid())
  tenantId         String
  name             String
  sheetWidthMm     Float
  sheetHeightMm    Float
  utilization      Float?    @default(0)
  snapshot         Json
  autosaveSnapshot Json?
  autosaveAt       DateTime?
  previewUrl       String?
  notes            String?
  status           String    @default("draft")
  queuedAt         DateTime?
  inProductionAt   DateTime?
  shippedAt        DateTime?
  supplierId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  tenant   Tenant           @relation(fields: [tenantId], references: [id])
  supplier SupplierProfile? @relation(fields: [supplierId], references: [id])
  items    GangSheetItem[]

  @@index([tenantId])
  @@index([tenantId, status])
}

model GangSheetItem {
  id          String   @id @default(cuid())
  gangSheetId String
  designId    String?
  quantity    Int      @default(1)
  position    Json
  metadata    Json?
  createdAt   DateTime @default(now())

  gangSheet GangSheet       @relation(fields: [gangSheetId], references: [id])
  design    DesignDocument? @relation(fields: [designId], references: [id])

  @@index([gangSheetId])
}

model Job {
  id               String    @id @default(uuid())
  tenantId         String
  orderId          String?
  designId         String?
  printTechniqueId String?
  supplierId       String?
  status           JobStatus @default(QUEUED)
  priority         Int?      @default(0)
  scheduledFor     DateTime?
  startedAt        DateTime?
  completedAt      DateTime?
  outputs          Json?
  attachments      Json?
  notes            String?
  metadata         Json?
  assignedUserId   String?
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  order          Order?           @relation(fields: [orderId], references: [id])
  design         DesignDocument?  @relation(fields: [designId], references: [id])
  printTechnique PrintTechnique?  @relation(fields: [printTechniqueId], references: [id])
  supplier       SupplierProfile? @relation(fields: [supplierId], references: [id])
  assignedUser   User?            @relation(fields: [assignedUserId], references: [id])
  tasks          BackgroundTask[]

  @@index([tenantId, status])
  @@index([tenantId, deletedAt])
}

model Order {
  id             String   @id @default(uuid())
  tenantId       String
  shopifyOrderId String?
  customerEmail  String?
  customerName   String?
  currency       String?
  subtotal       Decimal? @db.Decimal(12, 2)
  taxTotal       Decimal? @db.Decimal(12, 2)
  shippingTotal  Decimal? @db.Decimal(12, 2)
  discountsTotal Decimal? @db.Decimal(12, 2)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant         Tenant           @relation(fields: [tenantId], references: [id])
  jobs           Job[]
  designs        DesignDocument[]
  billingCharges BillingCharge[]

  @@index([tenantId, shopifyOrderId])
}

model BillingConfig {
  id                 String   @id @default(cuid())
  tenantId           String   @unique
  currency           String   @default("USD")
  perOrderFee        Decimal? @db.Decimal(10, 2)
  freeOrderAllowance Int?     @default(0)
  notes              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model BillingCharge {
  id          String              @id @default(cuid())
  tenantId    String
  orderId     String?
  type        String
  description String?
  currency    String              @default("USD")
  quantity    Int                 @default(1)
  unitAmount  Decimal             @db.Decimal(10, 2)
  totalAmount Decimal             @db.Decimal(12, 2)
  status      BillingChargeStatus @default(PENDING)
  metadata    Json?
  occurredAt  DateTime            @default(now())
  invoicedAt  DateTime?
  settledAt   DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  order  Order? @relation(fields: [orderId], references: [id])

  @@index([tenantId, occurredAt])
  @@index([tenantId, status])
  @@index([orderId])
}

model PricingRule {
  id        String    @id @default(uuid())
  tenantId  String
  name      String
  scope     String
  criteria  Json?
  formula   Json
  active    Boolean   @default(true)
  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, active])
}

model Discount {
  id         String    @id @default(uuid())
  tenantId   String
  code       String
  config     Json
  usageLimit Int?
  usedCount  Int       @default(0)
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, code])
}

model TaxProfile {
  id         String   @id @default(uuid())
  tenantId   String
  regionCode String
  rate       Decimal  @db.Decimal(5, 4)
  config     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, regionCode])
}

model AuditLog {
  id          String   @id @default(cuid())
  tenantId    String?
  actorUserId String?
  event       String
  entity      String
  entityId    String?
  diff        Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  tenant Tenant? @relation(fields: [tenantId], references: [id])
  actor  User?   @relation("AuditActor", fields: [actorUserId], references: [id])

  @@index([tenantId, createdAt])
  @@index([entity, entityId])
}

model WebhookEvent {
  id          String    @id @default(cuid())
  tenantId    String
  topic       String
  payload     Json
  status      String    @default("pending")
  receivedAt  DateTime  @default(now())
  processedAt DateTime?
  error       String?

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId, topic])
}

model BackgroundTask {
  id         String    @id @default(cuid())
  tenantId   String?
  jobId      String?
  type       String
  payload    Json?
  state      TaskState @default(PENDING)
  retries    Int       @default(0)
  lastError  String?
  startedAt  DateTime?
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tenant Tenant? @relation(fields: [tenantId], references: [id])
  job    Job?    @relation(fields: [jobId], references: [id])

  @@index([tenantId, state])
}

model Shortcode {
  id            String   @id @default(cuid())
  tenantId      String
  handle        String   @unique
  productId     String?
  productGid    String
  productTitle  String?
  productHandle String?
  surfaceId     String?
  templateId    String?
  technique     String?
  locale        String?  @default("en")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant  Tenant           @relation(fields: [tenantId], references: [id])
  product Product?         @relation(fields: [productId], references: [id])
  usages  ShortcodeUsage[]

  @@index([tenantId])
}

model ShortcodeUsage {
  id           String   @id @default(cuid())
  shortcodeId  String
  tenantId     String?
  handle       String
  referrer     String?
  userAgent    String?
  status       String   @default("success")
  errorCode    String?
  errorMessage String?
  meta         Json?
  createdAt    DateTime @default(now())

  shortcode Shortcode @relation(fields: [shortcodeId], references: [id], onDelete: Cascade)
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])

  @@index([shortcodeId, createdAt])
  @@index([handle, createdAt])
}

model DesignOutput {
  id        String   @id @default(cuid())
  designId  String
  tenantId  String
  kind      String
  url       String
  metadata  Json?
  createdAt DateTime @default(now())

  design DesignDocument @relation(fields: [designId], references: [id])
  tenant Tenant         @relation(fields: [tenantId], references: [id])

  @@index([designId, kind])
  @@index([tenantId, kind])
}

model Notification {
  id        String    @id @default(cuid())
  tenantId  String
  userId    String?
  kind      String
  payload   Json?
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  readAt    DateTime?

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@index([tenantId, createdAt])
  @@index([tenantId, isRead])
}

model SupplierRoutingRule {
  id         String   @id @default(cuid())
  tenantId   String
  supplierId String
  technique  String
  region     String?
  minQty     Int?
  maxQty     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tenant   Tenant          @relation(fields: [tenantId], references: [id])
  supplier SupplierProfile @relation(fields: [supplierId], references: [id])

  @@index([tenantId, technique, region])
}
